import { SnarkProverArtifacts, FullProof } from './types';
import { MerkleSumTree } from 'pyt-merkle-sum-tree';
/**
 * Prover is a class that contains the core methods to let CEXs provide credible Proof Of Solvency to its users
 * while maintaining secrecy over their Business Information thanks to zkSNARKs.
 * The proof doesn't reveal any information such as the total balances of each users, the number of users and total amount of liabilities of the exchange.
 */
export default class Prover {
    private readonly _tree;
    private readonly _assetsSum;
    private readonly _proverArtifacts;
    /**
     * Initializes the prover
     * @param tree The Merkle Sum Tree generated by the prover.
     * @param assetsSum The total assets owned by the exchange.
     * @param proverArtifacts The artifacts of the prover.
     */
    constructor(tree: MerkleSumTree, assetsSum: bigint, proverArtifacts: SnarkProverArtifacts);
    get tree(): MerkleSumTree;
    get assetsSum(): bigint;
    /**
     * Generate a proof of solvency for a specific user.
     * @param userIndex The index of the user in the csv file.
     * @returns A proof of solvency.
     */
    generateProofForUser(userIndex: number): Promise<FullProof>;
}
